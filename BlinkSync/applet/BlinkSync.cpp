#define COPY

#include "WProgram.h"
void setup();
void loop();
void readBytes();
void readBytess();
int copier();
int led = 13;
int wait = 500;
int master = -1;
int syncWait = 2000;
int r;

#ifdef COPY
int trigger = 2;
#endif

void setup() {
  pinMode(led, OUTPUT);
  #ifdef COPY
  pinMode(trigger, INPUT);
  digitalWrite(trigger, HIGH);
  #endif
  Serial.begin(57600);
}

void loop() {
  #ifdef COPY
  if (digitalRead(trigger) == LOW) {
    digitalWrite(led, HIGH);
    while(digitalRead(trigger) == LOW);
    digitalWrite(led, LOW);
    copier();
  }
  #endif
  
  if (master == -1) {
    // we don't know whether we're a master or not
    // wait for x ms
    delay(syncWait);
    // have we got anything?
    if (Serial.available() > 0) {
      // yes we do!
      // that means we're nothing but a slave :(
      // flush this away
      Serial.flush();
      master = 0;
    } else {
      // nothing received
      // we are the masters of the serial port
      master = 1;
    }
  }
  
  if (master) {
    // complete one blink cycle
    // also sending out sync signals to the slave
    Serial.print(0xFF, BYTE);
    digitalWrite(led, HIGH);
    delay(500);
    digitalWrite(led, LOW);
    Serial.print(0xFE, BYTE);
    delay(500);
  } else {
    // we're a slave
    // wait for the sync signals from the master
    if (Serial.available() > 0) {
      r = Serial.read();
      if (r == 0xFF) {
        digitalWrite(led, HIGH);
      } else if (r == 0xFE) {
        digitalWrite(led, LOW);
      }
    }
  }
}
#ifdef COPY

#include <avr/pgmspace.h>

prog_uchar sketch[] PROGMEM = {0x0c,0x94,0x62,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x18,0x01,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x31,0x02,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x0c,0x94,0x8a,0x00,0x00,0x00,0x00,0x00,0x24,0x00,0x27,0x00,0x2a,0x00,0x00,0x00,0x00,0x00,0x25,0x00,0x28,0x00,0x2b,0x00,0x00,0x00,0x00,0x00,0x23,0x00,0x26,0x00,0x29,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x02,0x02,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x01,0x02,0x04,0x08,0x10,0x20,0x01,0x02,0x04,0x08,0x10,0x20,0x00,0x00,0x00,0x07,0x00,0x02,0x01,0x00,0x00,0x03,0x04,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc2,0x03,0x11,0x24,0x1f,0xbe,0xcf,0xef,0xd8,0xe0,0xde,0xbf,0xcd,0xbf,0x11,0xe0,0xa0,0xe0,0xb1,0xe0,0xe4,0xe2,0xfb,0xe0,0x02,0xc0,0x05,0x90,0x0d,0x92,0xa0,0x31,0xb1,0x07,0xd9,0xf7,0x11,0xe0,0xa0,0xe1,0xb1,0xe0,0x01,0xc0,0x1d,0x92,0xa2,0x3b,0xb1,0x07,0xe1,0xf7,0x10,0xe0,0xc4,0xec,0xd0,0xe0,0x04,0xc0,0x22,0x97,0xfe,0x01,0x0e,0x94,0x8c,0x05,0xc2,0x3c,0xd1,0x07,0xc9,0xf7,0x0e,0x94,0x11,0x01,0x0c,0x94,0x90,0x05,0x0c,0x94,0x00,0x00,0x80,0x91,0x02,0x01,0x90,0x91,0x03,0x01,0x8f,0x5f,0x9f,0x4f,0xf9,0xf4,0x60,0x91,0x04,0x01,0x70,0x91,0x05,0x01,0x88,0x27,0x77,0xfd,0x80,0x95,0x98,0x2f,0x0e,0x94,0x60,0x01,0x8f,0xe9,0x91,0xe0,0x0e,0x94,0x67,0x03,0x88,0x23,0x49,0xf0,0x8f,0xe9,0x91,0xe0,0x0e,0x94,0xa3,0x03,0x10,0x92,0x03,0x01,0x10,0x92,0x02,0x01,0x06,0xc0,0x81,0xe0,0x90,0xe0,0x90,0x93,0x03,0x01,0x80,0x93,0x02,0x01,0x80,0x91,0x02,0x01,0x90,0x91,0x03,0x01,0x89,0x2b,0x59,0xf1,0x8f,0xe9,0x91,0xe0,0x4f,0xef,0x50,0xe0,0x60,0xe0,0x70,0xe0,0x20,0xe0,0x30,0xe0,0x0e,0x94,0xf2,0x04,0x80,0x91,0x00,0x01,0x61,0xe0,0x0e,0x94,0xe4,0x01,0x64,0xef,0x71,0xe0,0x80,0xe0,0x90,0xe0,0x0e,0x94,0x60,0x01,0x80,0x91,0x00,0x01,0x60,0xe0,0x0e,0x94,0xe4,0x01,0x8f,0xe9,0x91,0xe0,0x4e,0xef,0x50,0xe0,0x60,0xe0,0x70,0xe0,0x20,0xe0,0x30,0xe0,0x0e,0x94,0xf2,0x04,0x64,0xef,0x71,0xe0,0x80,0xe0,0x90,0xe0,0x0e,0x94,0x60,0x01,0x08,0x95,0x8f,0xe9,0x91,0xe0,0x0e,0x94,0x67,0x03,0x88,0x23,0xc9,0xf0,0x8f,0xe9,0x91,0xe0,0x0e,0x94,0x7b,0x03,0x90,0x93,0x11,0x01,0x80,0x93,0x10,0x01,0x8f,0x3f,0x91,0x05,0x31,0xf4,0x80,0x91,0x00,0x01,0x61,0xe0,0x0e,0x94,0xe4,0x01,0x08,0x95,0x8e,0x3f,0x91,0x05,0x29,0xf4,0x80,0x91,0x00,0x01,0x60,0xe0,0x0e,0x94,0xe4,0x01,0x08,0x95,0x80,0x91,0x00,0x01,0x61,0xe0,0x0e,0x94,0xc4,0x01,0x8f,0xe9,0x91,0xe0,0x40,0xe0,0x51,0xee,0x60,0xe0,0x70,0xe0,0x0e,0x94,0x6e,0x02,0x08,0x95,0x0e,0x94,0x8a,0x01,0x0e,0x94,0x03,0x01,0x0e,0x94,0x8c,0x00,0xfd,0xcf,0x1f,0x92,0x0f,0x92,0x0f,0xb6,0x0f,0x92,0x11,0x24,0x2f,0x93,0x3f,0x93,0x8f,0x93,0x9f,0x93,0xaf,0x93,0xbf,0x93,0x80,0x91,0x16,0x01,0x90,0x91,0x17,0x01,0xa0,0x91,0x18,0x01,0xb0,0x91,0x19,0x01,0x30,0x91,0x1a,0x01,0x01,0x96,0xa1,0x1d,0xb1,0x1d,0x23,0x2f,0x2d,0x5f,0x2d,0x37,0x20,0xf0,0x2d,0x57,0x01,0x96,0xa1,0x1d,0xb1,0x1d,0x20,0x93,0x1a,0x01,0x80,0x93,0x16,0x01,0x90,0x93,0x17,0x01,0xa0,0x93,0x18,0x01,0xb0,0x93,0x19,0x01,0x80,0x91,0x12,0x01,0x90,0x91,0x13,0x01,0xa0,0x91,0x14,0x01,0xb0,0x91,0x15,0x01,0x01,0x96,0xa1,0x1d,0xb1,0x1d,0x80,0x93,0x12,0x01,0x90,0x93,0x13,0x01,0xa0,0x93,0x14,0x01,0xb0,0x93,0x15,0x01,0xbf,0x91,0xaf,0x91,0x9f,0x91,0x8f,0x91,0x3f,0x91,0x2f,0x91,0x0f,0x90,0x0f,0xbe,0x0f,0x90,0x1f,0x90,0x18,0x95,0xef,0x92,0xff,0x92,0x0f,0x93,0x1f,0x93,0x7b,0x01,0x8c,0x01,0x8f,0xb7,0xf8,0x94,0x40,0x91,0x16,0x01,0x50,0x91,0x17,0x01,0x60,0x91,0x18,0x01,0x70,0x91,0x19,0x01,0x8f,0xbf,0x2f,0xb7,0xf8,0x94,0x80,0x91,0x16,0x01,0x90,0x91,0x17,0x01,0xa0,0x91,0x18,0x01,0xb0,0x91,0x19,0x01,0x2f,0xbf,0x84,0x1b,0x95,0x0b,0xa6,0x0b,0xb7,0x0b,0xe8,0x16,0xf9,0x06,0x0a,0x07,0x1b,0x07,0x60,0xf7,0x1f,0x91,0x0f,0x91,0xff,0x90,0xef,0x90,0x08,0x95,0x78,0x94,0x84,0xb5,0x82,0x60,0x84,0xbd,0x84,0xb5,0x81,0x60,0x84,0xbd,0x85,0xb5,0x82,0x60,0x85,0xbd,0x85,0xb5,0x81,0x60,0x85,0xbd,0xee,0xe6,0xf0,0xe0,0x80,0x81,0x81,0x60,0x80,0x83,0xe1,0xe8,0xf0,0xe0,0x80,0x81,0x82,0x60,0x80,0x83,0x80,0x81,0x81,0x60,0x80,0x83,0xe0,0xe8,0xf0,0xe0,0x80,0x81,0x81,0x60,0x80,0x83,0xe1,0xeb,0xf0,0xe0,0x80,0x81,0x84,0x60,0x80,0x83,0xe0,0xeb,0xf0,0xe0,0x80,0x81,0x81,0x60,0x80,0x83,0xea,0xe7,0xf0,0xe0,0x80,0x81,0x84,0x60,0x80,0x83,0x80,0x81,0x82,0x60,0x80,0x83,0x80,0x81,0x81,0x60,0x80,0x83,0x80,0x81,0x80,0x68,0x80,0x83,0x10,0x92,0xc1,0x00,0x08,0x95,0x28,0x2f,0x30,0xe0,0xc9,0x01,0x86,0x56,0x9f,0x4f,0xfc,0x01,0x94,0x91,0x2a,0x57,0x3f,0x4f,0xf9,0x01,0x84,0x91,0x88,0x23,0x91,0xf0,0xe8,0x2f,0xf0,0xe0,0xee,0x0f,0xff,0x1f,0xe8,0x59,0xff,0x4f,0xa5,0x91,0xb4,0x91,0x66,0x23,0x29,0xf4,0x8c,0x91,0x90,0x95,0x89,0x23,0x8c,0x93,0x08,0x95,0x8c,0x91,0x89,0x2b,0x8c,0x93,0x08,0x95,0x48,0x2f,0x50,0xe0,0xca,0x01,0x82,0x55,0x9f,0x4f,0xfc,0x01,0x24,0x91,0xca,0x01,0x86,0x56,0x9f,0x4f,0xfc,0x01,0x94,0x91,0x4a,0x57,0x5f,0x4f,0xfa,0x01,0x34,0x91,0x33,0x23,0xd1,0xf1,0x22,0x23,0x31,0xf1,0x23,0x30,0x21,0xf4,0x80,0x91,0x80,0x00,0x8f,0x77,0x05,0xc0,0x24,0x30,0x31,0xf4,0x80,0x91,0x80,0x00,0x8f,0x7d,0x80,0x93,0x80,0x00,0x18,0xc0,0x21,0x30,0x19,0xf4,0x84,0xb5,0x8f,0x77,0x04,0xc0,0x22,0x30,0x21,0xf4,0x84,0xb5,0x8f,0x7d,0x84,0xbd,0x0d,0xc0,0x26,0x30,0x21,0xf4,0x80,0x91,0xb0,0x00,0x8f,0x77,0x05,0xc0,0x27,0x30,0x29,0xf4,0x80,0x91,0xb0,0x00,0x8f,0x7d,0x80,0x93,0xb0,0x00,0xe3,0x2f,0xf0,0xe0,0xee,0x0f,0xff,0x1f,0xee,0x58,0xff,0x4f,0xa5,0x91,0xb4,0x91,0x66,0x23,0x29,0xf4,0x8c,0x91,0x90,0x95,0x89,0x23,0x8c,0x93,0x08,0x95,0x8c,0x91,0x89,0x2b,0x8c,0x93,0x08,0x95,0x1f,0x92,0x0f,0x92,0x0f,0xb6,0x0f,0x92,0x11,0x24,0x2f,0x93,0x3f,0x93,0x4f,0x93,0x5f,0x93,0x6f,0x93,0x7f,0x93,0x8f,0x93,0x9f,0x93,0xaf,0x93,0xbf,0x93,0xef,0x93,0xff,0x93,0x40,0x91,0xc6,0x00,0xe0,0x91,0x9b,0x01,0xf0,0x91,0x9c,0x01,0xcf,0x01,0x01,0x96,0x60,0xe8,0x70,0xe0,0x0e,0x94,0x26,0x05,0x9c,0x01,0x80,0x91,0x9d,0x01,0x90,0x91,0x9e,0x01,0x28,0x17,0x39,0x07,0x39,0xf0,0xe5,0x5e,0xfe,0x4f,0x40,0x83,0x30,0x93,0x9c,0x01,0x20,0x93,0x9b,0x01,0xff,0x91,0xef,0x91,0xbf,0x91,0xaf,0x91,0x9f,0x91,0x8f,0x91,0x7f,0x91,0x6f,0x91,0x5f,0x91,0x4f,0x91,0x3f,0x91,0x2f,0x91,0x0f,0x90,0x0f,0xbe,0x0f,0x90,0x1f,0x90,0x18,0x95,0x5f,0x92,0x6f,0x92,0x7f,0x92,0x8f,0x92,0x9f,0x92,0xaf,0x92,0xbf,0x92,0xcf,0x92,0xdf,0x92,0xef,0x92,0xff,0x92,0x0f,0x93,0x1f,0x93,0xcf,0x93,0xdf,0x93,0xec,0x01,0x3a,0x01,0x4b,0x01,0x41,0x34,0x82,0xe4,0x58,0x07,0x8f,0xe0,0x68,0x07,0x80,0xe0,0x78,0x07,0x0c,0xf0,0x7f,0xc0,0x60,0xe8,0x74,0xe8,0x8e,0xe1,0x90,0xe0,0xa4,0x01,0x93,0x01,0x0e,0x94,0x5b,0x05,0x21,0x50,0x30,0x40,0x40,0x40,0x50,0x40,0xca,0x01,0xb9,0x01,0x22,0xe0,0x30,0xe0,0x40,0xe0,0x50,0xe0,0x0e,0x94,0x5b,0x05,0x59,0x01,0x6a,0x01,0xa6,0x01,0x95,0x01,0x20,0x95,0x30,0x95,0x40,0x95,0x50,0x95,0x94,0xe0,0x22,0x0f,0x33,0x1f,0x44,0x1f,0x55,0x1f,0x9a,0x95,0xd1,0xf7,0x60,0xe0,0x74,0xe2,0x84,0xef,0x90,0xe0,0x0e,0x94,0x5b,0x05,0xca,0x01,0xb9,0x01,0x2f,0xef,0x30,0xe0,0x40,0xe0,0x50,0xe0,0x0e,0x94,0x07,0x05,0xa4,0x01,0x93,0x01,0x0e,0x94,0x5b,0x05,0xc9,0x01,0x81,0x50,0x9f,0x4f,0x18,0x16,0x19,0x06,0x1c,0xf4,0x52,0x2e,0x5a,0x94,0x03,0xc0,0x55,0x24,0x53,0x94,0x52,0x1a,0x60,0xe0,0x79,0xe0,0x8d,0xe3,0x90,0xe0,0xa4,0x01,0x93,0x01,0x0e,0x94,0x5b,0x05,0x21,0x50,0x30,0x40,0x40,0x40,0x50,0x40,0xca,0x01,0xb9,0x01,0x22,0xe0,0x30,0xe0,0x40,0xe0,0x50,0xe0,0x0e,0x94,0x5b,0x05,0x20,0x95,0x30,0x95,0x40,0x95,0x50,0x95,0x83,0xe0,0x22,0x0f,0x33,0x1f,0x44,0x1f,0x55,0x1f,0x8a,0x95,0xd1,0xf7,0x60,0xe0,0x74,0xe2,0x84,0xef,0x90,0xe0,0x0e,0x94,0x5b,0x05,0xca,0x01,0xb9,0x01,0x2f,0xef,0x30,0xe0,0x40,0xe0,0x50,0xe0,0x0e,0x94,0x07,0x05,0xa4,0x01,0x93,0x01,0x0e,0x94,0x5b,0x05,0xc9,0x01,0x81,0x50,0x9f,0x4f,0x18,0x16,0x19,0x06,0x1c,0xf4,0x82,0x2f,0x81,0x50,0x02,0xc0,0x81,0xe0,0x82,0x1b,0x85,0x15,0x00,0xf5,0xe8,0x85,0xf9,0x85,0x81,0xe0,0x90,0xe0,0x0a,0x88,0x02,0xc0,0x88,0x0f,0x99,0x1f,0x0a,0x94,0xe2,0xf7,0x80,0x83,0x60,0xe0,0x79,0xe0,0x8d,0xe3,0x90,0xe0,0xa4,0x01,0x93,0x01,0x0e,0x94,0x5b,0x05,0x21,0x50,0x30,0x40,0x40,0x40,0x50,0x40,0xca,0x01,0xb9,0x01,0x22,0xe0,0x30,0xe0,0x40,0xe0,0x50,0xe0,0x0e,0x94,0x5b,0x05,0x04,0xc0,0xe8,0x85,0xf9,0x85,0x10,0x82,0x95,0x01,0xec,0x81,0xfd,0x81,0x30,0x83,0xee,0x81,0xff,0x81,0x20,0x83,0xea,0x85,0xfb,0x85,0x20,0x81,0x41,0xe0,0x50,0xe0,0xca,0x01,0x0e,0x84,0x02,0xc0,0x88,0x0f,0x99,0x1f,0x0a,0x94,0xe2,0xf7,0x28,0x2b,0x20,0x83,0xea,0x85,0xfb,0x85,0x20,0x81,0xca,0x01,0x0f,0x84,0x02,0xc0,0x88,0x0f,0x99,0x1f,0x0a,0x94,0xe2,0xf7,0x28,0x2b,0x20,0x83,0xea,0x85,0xfb,0x85,0x80,0x81,0x08,0x88,0x02,0xc0,0x44,0x0f,0x55,0x1f,0x0a,0x94,0xe2,0xf7,0x84,0x2b,0x80,0x83,0xdf,0x91,0xcf,0x91,0x1f,0x91,0x0f,0x91,0xff,0x90,0xef,0x90,0xdf,0x90,0xcf,0x90,0xbf,0x90,0xaf,0x90,0x9f,0x90,0x8f,0x90,0x7f,0x90,0x6f,0x90,0x5f,0x90,0x08,0x95,0xdc,0x01,0x12,0x96,0xed,0x91,0xfc,0x91,0x13,0x97,0xe0,0x58,0xff,0x4f,0x81,0x91,0x91,0x91,0x80,0x58,0x9f,0x4f,0x20,0x81,0x31,0x81,0x82,0x1b,0x93,0x0b,0x60,0xe8,0x70,0xe0,0x0e,0x94,0x26,0x05,0x08,0x95,0xcf,0x93,0xdf,0x93,0xdc,0x01,0x12,0x96,0xed,0x91,0xfc,0x91,0x13,0x97,0xef,0x01,0xce,0x57,0xdf,0x4f,0x48,0x81,0x59,0x81,0xe0,0x58,0xff,0x4f,0x80,0x81,0x91,0x81,0xe0,0x58,0xf0,0x40,0x84,0x17,0x95,0x07,0x19,0xf4,0x2f,0xef,0x3f,0xef,0x0c,0xc0,0xe4,0x0f,0xf5,0x1f,0x20,0x81,0xca,0x01,0x01,0x96,0x60,0xe8,0x70,0xe0,0x0e,0x94,0x26,0x05,0x99,0x83,0x88,0x83,0x30,0xe0,0xc9,0x01,0xdf,0x91,0xcf,0x91,0x08,0x95,0xdc,0x01,0x12,0x96,0xed,0x91,0xfc,0x91,0x13,0x97,0xee,0x57,0xff,0x4f,0x80,0x81,0x91,0x81,0x92,0x93,0x82,0x93,0x08,0x95,0xfc,0x01,0xa0,0x85,0xb1,0x85,0x21,0x89,0x8c,0x91,0x90,0xe0,0x02,0x2e,0x02,0xc0,0x95,0x95,0x87,0x95,0x0a,0x94,0xe2,0xf7,0x80,0xff,0xf6,0xcf,0x04,0x84,0xf5,0x85,0xe0,0x2d,0x60,0x83,0x08,0x95,0x8a,0xe0,0x91,0xe0,0x90,0x93,0xa0,0x01,0x80,0x93,0x9f,0x01,0x8b,0xe1,0x91,0xe0,0x90,0x93,0xa2,0x01,0x80,0x93,0xa1,0x01,0x85,0xec,0x90,0xe0,0x90,0x93,0xa4,0x01,0x80,0x93,0xa3,0x01,0x84,0xec,0x90,0xe0,0x90,0x93,0xa6,0x01,0x80,0x93,0xa5,0x01,0x80,0xec,0x90,0xe0,0x90,0x93,0xa8,0x01,0x80,0x93,0xa7,0x01,0x81,0xec,0x90,0xe0,0x90,0x93,0xaa,0x01,0x80,0x93,0xa9,0x01,0x86,0xec,0x90,0xe0,0x90,0x93,0xac,0x01,0x80,0x93,0xab,0x01,0x84,0xe0,0x80,0x93,0xad,0x01,0x83,0xe0,0x80,0x93,0xae,0x01,0x87,0xe0,0x80,0x93,0xaf,0x01,0x85,0xe0,0x80,0x93,0xb0,0x01,0x81,0xe0,0x80,0x93,0xb1,0x01,0x08,0x95,0x0f,0x93,0x1f,0x93,0xcf,0x93,0xdf,0x93,0x8c,0x01,0xeb,0x01,0x09,0xc0,0x21,0x96,0xd8,0x01,0xed,0x91,0xfc,0x91,0x01,0x90,0xf0,0x81,0xe0,0x2d,0xc8,0x01,0x09,0x95,0x68,0x81,0x66,0x23,0xa1,0xf7,0xdf,0x91,0xcf,0x91,0x1f,0x91,0x0f,0x91,0x08,0x95,0xef,0x92,0xff,0x92,0x0f,0x93,0x1f,0x93,0xcf,0x93,0xdf,0x93,0x8c,0x01,0x7b,0x01,0xea,0x01,0x0c,0xc0,0xd7,0x01,0x6d,0x91,0x7d,0x01,0xd8,0x01,0xed,0x91,0xfc,0x91,0x01,0x90,0xf0,0x81,0xe0,0x2d,0xc8,0x01,0x09,0x95,0x21,0x97,0x20,0x97,0x91,0xf7,0xdf,0x91,0xcf,0x91,0x1f,0x91,0x0f,0x91,0xff,0x90,0xef,0x90,0x08,0x95,0x2f,0x92,0x3f,0x92,0x4f,0x92,0x5f,0x92,0x6f,0x92,0x7f,0x92,0x8f,0x92,0x9f,0x92,0xaf,0x92,0xbf,0x92,0xcf,0x92,0xdf,0x92,0xef,0x92,0xff,0x92,0x0f,0x93,0x1f,0x93,0xdf,0x93,0xcf,0x93,0xcd,0xb7,0xde,0xb7,0xa0,0x97,0x0f,0xb6,0xf8,0x94,0xde,0xbf,0x0f,0xbe,0xcd,0xbf,0x1c,0x01,0x6a,0x01,0x7b,0x01,0x41,0x15,0x51,0x05,0x61,0x05,0x71,0x05,0x49,0xf4,0xdc,0x01,0xed,0x91,0xfc,0x91,0x01,0x90,0xf0,0x81,0xe0,0x2d,0x60,0xe3,0x09,0x95,0x54,0xc0,0x88,0x24,0x99,0x24,0x54,0x01,0x42,0x2e,0x55,0x24,0x66,0x24,0x77,0x24,0x01,0xe0,0x10,0xe0,0x0c,0x0f,0x1d,0x1f,0x08,0x0d,0x19,0x1d,0xc7,0x01,0xb6,0x01,0xa3,0x01,0x92,0x01,0x0e,0x94,0x39,0x05,0xf8,0x01,0x60,0x83,0x08,0x94,0x81,0x1c,0x91,0x1c,0xa1,0x1c,0xb1,0x1c,0xc7,0x01,0xb6,0x01,0xa3,0x01,0x92,0x01,0x0e,0x94,0x39,0x05,0xc9,0x01,0xda,0x01,0x6c,0x01,0x7d,0x01,0xc1,0x14,0xd1,0x04,0xe1,0x04,0xf1,0x04,0xf1,0xf6,0x81,0xe0,0xe8,0x2e,0xf1,0x2c,0xec,0x0e,0xfd,0x1e,0xe8,0x0c,0xf9,0x1c,0x3e,0x01,0x08,0x94,0x61,0x1c,0x71,0x1c,0xd5,0x01,0xc4,0x01,0x01,0x97,0xa1,0x09,0xb1,0x09,0x6c,0x01,0xc8,0x18,0xd9,0x08,0x14,0xc0,0xf6,0x01,0xee,0x0d,0xff,0x1d,0x60,0x81,0x6a,0x30,0x10,0xf4,0x60,0x5d,0x01,0xc0,0x69,0x5c,0xd1,0x01,0xed,0x91,0xfc,0x91,0x01,0x90,0xf0,0x81,0xe0,0x2d,0xc1,0x01,0x09,0x95,0x08,0x94,0xe1,0x08,0xf1,0x08,0x6e,0x14,0x7f,0x04,0x49,0xf7,0xa0,0x96,0x0f,0xb6,0xf8,0x94,0xde,0xbf,0x0f,0xbe,0xcd,0xbf,0xcf,0x91,0xdf,0x91,0x1f,0x91,0x0f,0x91,0xff,0x90,0xef,0x90,0xdf,0x90,0xcf,0x90,0xbf,0x90,0xaf,0x90,0x9f,0x90,0x8f,0x90,0x7f,0x90,0x6f,0x90,0x5f,0x90,0x4f,0x90,0x3f,0x90,0x2f,0x90,0x08,0x95,0xef,0x92,0xff,0x92,0x0f,0x93,0x1f,0x93,0xcf,0x93,0xdf,0x93,0xec,0x01,0x7a,0x01,0x8b,0x01,0x77,0xff,0x0f,0xc0,0xe8,0x81,0xf9,0x81,0x01,0x90,0xf0,0x81,0xe0,0x2d,0x6d,0xe2,0x09,0x95,0x10,0x95,0x00,0x95,0xf0,0x94,0xe0,0x94,0xe1,0x1c,0xf1,0x1c,0x01,0x1d,0x11,0x1d,0xce,0x01,0xb8,0x01,0xa7,0x01,0x2a,0xe0,0x0e,0x94,0x33,0x04,0xdf,0x91,0xcf,0x91,0x1f,0x91,0x0f,0x91,0xff,0x90,0xef,0x90,0x08,0x95,0xdc,0x01,0x21,0x15,0x31,0x05,0x41,0xf4,0xed,0x91,0xfc,0x91,0x01,0x90,0xf0,0x81,0xe0,0x2d,0x64,0x2f,0x09,0x95,0x08,0x95,0x2a,0x30,0x31,0x05,0x19,0xf4,0x0e,0x94,0xcb,0x04,0x08,0x95,0x0e,0x94,0x33,0x04,0x08,0x95,0x62,0x9f,0xd0,0x01,0x73,0x9f,0xf0,0x01,0x82,0x9f,0xe0,0x0d,0xf1,0x1d,0x64,0x9f,0xe0,0x0d,0xf1,0x1d,0x92,0x9f,0xf0,0x0d,0x83,0x9f,0xf0,0x0d,0x74,0x9f,0xf0,0x0d,0x65,0x9f,0xf0,0x0d,0x99,0x27,0x72,0x9f,0xb0,0x0d,0xe1,0x1d,0xf9,0x1f,0x63,0x9f,0xb0,0x0d,0xe1,0x1d,0xf9,0x1f,0xbd,0x01,0xcf,0x01,0x11,0x24,0x08,0x95,0x97,0xfb,0x09,0x2e,0x07,0x26,0x0a,0xd0,0x77,0xfd,0x04,0xd0,0x49,0xd0,0x06,0xd0,0x00,0x20,0x1a,0xf4,0x70,0x95,0x61,0x95,0x7f,0x4f,0x08,0x95,0xf6,0xf7,0x90,0x95,0x81,0x95,0x9f,0x4f,0x08,0x95,0xa1,0xe2,0x1a,0x2e,0xaa,0x1b,0xbb,0x1b,0xfd,0x01,0x0d,0xc0,0xaa,0x1f,0xbb,0x1f,0xee,0x1f,0xff,0x1f,0xa2,0x17,0xb3,0x07,0xe4,0x07,0xf5,0x07,0x20,0xf0,0xa2,0x1b,0xb3,0x0b,0xe4,0x0b,0xf5,0x0b,0x66,0x1f,0x77,0x1f,0x88,0x1f,0x99,0x1f,0x1a,0x94,0x69,0xf7,0x60,0x95,0x70,0x95,0x80,0x95,0x90,0x95,0x9b,0x01,0xac,0x01,0xbd,0x01,0xcf,0x01,0x08,0x95,0x97,0xfb,0x09,0x2e,0x05,0x26,0x0e,0xd0,0x57,0xfd,0x04,0xd0,0xd7,0xdf,0x0a,0xd0,0x00,0x1c,0x38,0xf4,0x50,0x95,0x40,0x95,0x30,0x95,0x21,0x95,0x3f,0x4f,0x4f,0x4f,0x5f,0x4f,0x08,0x95,0xf6,0xf7,0x90,0x95,0x80,0x95,0x70,0x95,0x61,0x95,0x7f,0x4f,0x8f,0x4f,0x9f,0x4f,0x08,0x95,0xaa,0x1b,0xbb,0x1b,0x51,0xe1,0x07,0xc0,0xaa,0x1f,0xbb,0x1f,0xa6,0x17,0xb7,0x07,0x10,0xf0,0xa6,0x1b,0xb7,0x0b,0x88,0x1f,0x99,0x1f,0x5a,0x95,0xa9,0xf7,0x80,0x95,0x90,0x95,0xbc,0x01,0xcd,0x01,0x08,0x95,0xee,0x0f,0xff,0x1f,0x05,0x90,0xf4,0x91,0xe0,0x2d,0x09,0x94,0xf8,0x94,0xff,0xcf,0x0d,0x00,0xff,0xff,0xd0,0x07,0x00,0x00,0x00,0x00,0xaf,0x03,0xfc,0x03,0x14,0x04};
int sketchLength = 2868;

int resetPin = 7;

int began = 0, groove = 50, i, j, start, end, address, laddress, haddress, error = 0, a, b, c, d, e, f, buff[128], buffLength, k, readBuff[16], preBuff, readBuffLength;

void readBytes() {
  readBuffLength = 0;
  while (Serial.available() > 0) {
    preBuff = Serial.read();
    if (preBuff == 0xFC) {
      preBuff = 0x10;
    }
    readBuff[readBuffLength] = preBuff;
    readBuffLength++;
  }
}

void readBytess() {
  readBuffLength = 0;
  while (Serial.available() > 0) {
    readBuff[readBuffLength] = Serial.read();
    readBuffLength++;
  }
}

int copier() {
  if (!began) {
    Serial.begin(57600);
    pinMode(resetPin, OUTPUT);
    began = 1;
  }
  
  digitalWrite(resetPin, LOW);
  delay(100);
  digitalWrite(resetPin, HIGH);
  delay(100);
  
  // get in sync with the avr
  for (i = 0; i < 25; i++) {
    Serial.print(0x30, BYTE);
    Serial.print(0x20, BYTE);
    delay(groove);
  }
                  
  readBytes();
  if (readBuffLength < 2 || readBuff[0] != 0x14 || readBuff[1] != 0x10) {
    return 0;
  }
  
  Serial.flush();
  
  // set the programming parameters
  Serial.print(0x42, BYTE);
  Serial.print(0x86, BYTE);
  Serial.print(0x00, BYTE);
  Serial.print(0x00, BYTE);
  Serial.print(0x01, BYTE);
  Serial.print(0x01, BYTE);
  Serial.print(0x01, BYTE);
  Serial.print(0x01, BYTE);
  Serial.print(0x03, BYTE);
  Serial.print(0xff, BYTE);
  Serial.print(0xff, BYTE);
  Serial.print(0xff, BYTE);
  Serial.print(0xff, BYTE);
  Serial.print(0x00, BYTE);
  Serial.print(0x80, BYTE);
  Serial.print(0x04, BYTE);
  Serial.print(0x00, BYTE);
  Serial.print(0x00, BYTE);
  Serial.print(0x00, BYTE);
  Serial.print(0x80, BYTE);
  Serial.print(0x00, BYTE);
  Serial.print(0x20, BYTE);
  delay(groove);
  
  readBytes();
  if (readBuffLength != 2 || readBuff[0] != 0x14 || readBuff[1] != 0x10) {
    return 0;
  }
  
  // set the extended programming parameters
  Serial.print(0x45, BYTE);
  Serial.print(0x05, BYTE);
  Serial.print(0x04, BYTE);
  Serial.print(0xd7, BYTE);
  Serial.print(0xc2, BYTE);
  Serial.print(0x00, BYTE);
  Serial.print(0x20, BYTE);
  delay(groove);
  
  readBytes();
  if (readBuffLength != 2 || readBuff[0] != 0x14 || readBuff[1] != 0x10) {
    return 0;
  }
  
  // enter programming mode
  Serial.print(0x50, BYTE);
  Serial.print(0x20, BYTE);
  delay(groove);
  
  readBytes();
  if (readBuffLength != 2 || readBuff[0] != 0x14 || readBuff[1] != 0x10) {
    return 0;
  }
  
  // unlike the desktop version, we don't have enough space to create all of the blocks first
  // and then send each one by one
  // we must generate each block on the fly
  
  address = 0;
  for (i = 0; i < sketchLength; i += 128) {
    start = i;
    end = i + 127; // inclusive
    //if (sketchLength >= end) {
    if (sketchLength <= end) {
      end = sketchLength - 1;
    }
    buffLength = end - start + 1;
    for (j = 0; j < buffLength; j++) {
      buff[j] = pgm_read_byte(sketch+i+j);
    }
    // the buffer is now filled with the appropriate bytes
    
    // set the address of the avr's flash memory to write to
    haddress = address / 256;
    laddress = address % 256;
    address += 64;
    Serial.print(0x55, BYTE);
    Serial.print(laddress, BYTE);
    Serial.print(haddress, BYTE);
    Serial.print(0x20, BYTE);
    delay(groove);
    
    readBytes();
    if (readBuffLength != 2 || readBuff[0] != 0x14 || readBuff[1] != 0x10) {
      return 0;
    }
    
    // write the block
    Serial.print(0x64, BYTE);
    Serial.print(0x00, BYTE);
    Serial.print(buffLength, BYTE);
    Serial.print(0x46, BYTE);
    for (j = 0; j < buffLength; j++) {
      Serial.print(buff[j], BYTE);
    }
    Serial.print(0x20, BYTE);
    delay(groove);
    
    readBytes();
    if (readBuffLength != 2 || readBuff[0] != 0x14 || readBuff[1] != 0x10) {
      return 0;
    }
  }
  
  // leave programming mode
  Serial.print(0x51, BYTE);
  Serial.print(0x20, BYTE);
  delay(groove);
  readBytes();
  if (readBuffLength != 2 || readBuff[0] != 0x14 || readBuff[1] != 0x10) {
    return 0;
  }
  
  return 1;
}

#endif

int main(void)
{
	init();

	setup();
    
	for (;;)
		loop();
        
	return 0;
}

